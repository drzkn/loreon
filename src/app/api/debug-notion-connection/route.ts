import 'dotenv/config';

export async function GET() {
  const headers = new Headers({
    'Content-Type': 'text/plain; charset=utf-8',
    'Cache-Control': 'no-cache',
    'Connection': 'keep-alive',
  });

  const stream = new ReadableStream({
    start(controller) {
      const sendLog = (message: string) => {
        const encoder = new TextEncoder();
        controller.enqueue(encoder.encode(`${message}\n`));
      };

      const debugProcess = async () => {
        try {
          sendLog('üîç DIAGN√ìSTICO DE CONEXI√ìN CON NOTION API');
          sendLog('===============================================');

          sendLog('üìã 1. VERIFICANDO VARIABLES DE ENTORNO:');
          const notionApiKey = process.env.NOTION_API_KEY;
          const databaseIdsStr = process.env.NOTION_DATABASE_ID;

          sendLog(`‚Ä¢ NOTION_API_KEY: ${notionApiKey ? `‚úÖ Configurada (${notionApiKey.substring(0, 10)}...)` : '‚ùå No encontrada'}`);
          sendLog(`‚Ä¢ NOTION_DATABASE_ID: ${databaseIdsStr ? `‚úÖ Configurada (${databaseIdsStr})` : '‚ùå No encontrada'}`);

          if (!notionApiKey) {
            sendLog('‚ùå ERROR CR√çTICO: NOTION_API_KEY no est√° configurada');
            sendLog('Configura tu NOTION_API_KEY en las variables de entorno');
            controller.close();
            return;
          }

          if (!databaseIdsStr) {
            sendLog('‚ùå ERROR CR√çTICO: NOTION_DATABASE_ID no est√° configurada');
            sendLog('Configura tu NOTION_DATABASE_ID en las variables de entorno');
            controller.close();
            return;
          }

          const databaseIds = databaseIdsStr.split(',').map(id => id.trim()).filter(id => id.length > 0);
          sendLog(`‚Ä¢ Total databases configuradas: ${databaseIds.length}`);

          sendLog('üåê 2. PROBANDO CONEXI√ìN B√ÅSICA CON NOTION:');
          sendLog('‚Ä¢ Saltando prueba de usuario (funcionalidad removida)');

          sendLog('üìä 3. PROBANDO ACCESO A DATABASES CONFIGURADAS:');
          const { container } = await import('@/infrastructure/di/container');
          const queryDatabaseUseCase = container.queryDatabaseUseCase;
          const getDatabaseUseCase = container.getDatabaseUseCase;

          for (let i = 0; i < databaseIds.length; i++) {
            const databaseId = databaseIds[i];
            sendLog(`Database ${i + 1}/${databaseIds.length}: ${databaseId}`);

            try {
              sendLog(`üîç Obteniendo informaci√≥n de la database...`);
              const databaseInfo = await getDatabaseUseCase.execute(databaseId);
              sendLog(`‚úÖ Database encontrada: "${databaseInfo.title}"`);
              sendLog(`‚Ä¢ Creada: ${databaseInfo.createdTime}`);
              sendLog(`‚Ä¢ √öltima edici√≥n: ${databaseInfo.lastEditedTime}`);
              sendLog(`üìÑ Consultando p√°ginas de la database...`);
              const pages = await queryDatabaseUseCase.execute(databaseId);
              sendLog(`‚úÖ Consulta exitosa: ${pages.length} p√°ginas encontradas`);

              if (pages.length > 0) {
                sendLog(`     üìã Primeras p√°ginas:`);
                pages.slice(0, 3).forEach((page, index) => {
                  const title = page.properties?.title || page.properties?.Name || 'Sin t√≠tulo';
                  const titleStr = typeof title === 'string' ? title : JSON.stringify(title).substring(0, 50);
                  sendLog(`${index + 1}. ${titleStr} (${page.id})`);
                });
                if (pages.length > 3) {
                  sendLog(`... y ${pages.length - 3} p√°ginas m√°s`);
                }
              } else {
                sendLog(`‚ö†Ô∏è Database vac√≠a o sin p√°ginas accesibles`);
              }

            } catch (error) {
              sendLog(`‚ùå Error al acceder a la database: ${error instanceof Error ? error.message : 'Error desconocido'}`);

              if (error && typeof error === 'object' && 'response' in error) {
                const axiosError = error as { response?: { status?: number; data?: { message?: string } } };
                const status = axiosError.response?.status;
                const responseData = axiosError.response?.data;

                sendLog(`‚Ä¢ Status HTTP: ${status}`);
                sendLog(`‚Ä¢ Respuesta: ${JSON.stringify(responseData, null, 2)}`);

                // An√°lisis espec√≠fico del error 400
                if (status === 400) {
                  sendLog(`üîç AN√ÅLISIS ERROR 400 (Bad Request):`);
                  sendLog(`‚ö†Ô∏è La request est√° mal formateada`);

                  // Validar formato del Database ID
                  if (databaseId.includes('-')) {
                    sendLog(`‚ùå Database ID contiene guiones: ${databaseId}`);
                    sendLog(`üí° SOLUCI√ìN: Remover todos los guiones del Database ID`);
                    const cleanId = databaseId.replace(/-/g, '');
                    sendLog(`‚úÖ ID corregido deber√≠a ser: ${cleanId}`);
                  }

                  if (databaseId.length !== 32) {
                    sendLog(`‚ùå Database ID tiene longitud incorrecta: ${databaseId.length} caracteres`);
                    sendLog(`üí° SOLUCI√ìN: Database ID debe tener exactamente 32 caracteres`);
                  }

                  if (!/^[a-f0-9]{32}$/.test(databaseId.replace(/-/g, ''))) {
                    sendLog(`‚ùå Database ID contiene caracteres inv√°lidos`);
                    sendLog(`üí° SOLUCI√ìN: Database ID debe contener solo letras a-f y n√∫meros 0-9`);
                  }

                  if (responseData?.message) {
                    sendLog(`üìù Mensaje de Notion: ${responseData.message}`);
                  }

                } else if (status === 401) {
                  sendLog(`üîç AN√ÅLISIS ERROR 401: API Key inv√°lida`);
                  sendLog(`üí° SOLUCI√ìN: Verifica tu NOTION_API_KEY`);

                } else if (status === 403) {
                  sendLog(`üîç AN√ÅLISIS ERROR 403: Sin permisos`);
                  sendLog(`üí° SOLUCI√ìN: A√±ade la database a tu integraci√≥n de Notion`);

                } else if (status === 404) {
                  sendLog(`üîç AN√ÅLISIS ERROR 404: Database no encontrada`);
                  sendLog(`üí° SOLUCI√ìN: Verifica que el Database ID sea correcto`);
                }
              }
            }
            sendLog('');
          }

          const hasFormatErrors = databaseIds.some(id =>
            id.includes('-') || id.length !== 32 || !/^[a-f0-9]{32}$/.test(id.replace(/-/g, ''))
          );

          if (hasFormatErrors) {
            sendLog('üîß 4. CORRECCI√ìN AUTOM√ÅTICA DE DATABASE IDs:');
            sendLog('Se detectaron errores de formato. IDs corregidos:');

            const correctedIds = databaseIds.map(id => {
              const cleanId = id.replace(/-/g, '');
              sendLog(`‚Ä¢ Original: ${id}`);
              sendLog(`‚Ä¢ Corregido: ${cleanId}`);
              return cleanId;
            });

            sendLog('üí° VARIABLE DE ENTORNO CORREGIDA:');
            sendLog(`NOTION_DATABASE_ID="${correctedIds.join(',')}"`);
          }

          // 5. Resumen y recomendaciones
          sendLog('üìã 5. RESUMEN Y RECOMENDACIONES:');
          sendLog('‚úÖ Diagn√≥stico completado');
          sendLog('üîß SOLUCIONES COMUNES PARA ERROR 400:');
          sendLog('‚Ä¢ Database ID con guiones: remueve todos los guiones (-)');
          sendLog('‚Ä¢ Database ID muy largo/corto: debe tener exactamente 32 caracteres');
          sendLog('‚Ä¢ Caracteres inv√°lidos: solo usa letras a-f y n√∫meros 0-9');
          sendLog('üîß OTRAS SOLUCIONES:');
          sendLog('‚Ä¢ Error 401: verifica que la API key sea correcta');
          sendLog('‚Ä¢ Error 403: verifica que la integraci√≥n tenga permisos');
          sendLog('‚Ä¢ Error 404: verifica que los database IDs sean correctos');
          sendLog('‚Ä¢ Sin p√°ginas: verifica que la database tenga contenido');
          sendLog('üìù CONFIGURACI√ìN ACTUAL:');
          sendLog(`‚Ä¢ Environment: ${process.env.NODE_ENV || 'development'}`);
          sendLog(`‚Ä¢ Total databases: ${databaseIds.length}`);
          sendLog(`‚Ä¢ API Key presente: ${!!notionApiKey}`);

        } catch (error) {
          sendLog(`‚ùå Error cr√≠tico en diagn√≥stico: ${error instanceof Error ? error.message : 'Error desconocido'}`);
        } finally {
          try {
            controller.close();
          } catch {
            // Ignorar errores al cerrar el controlador (puede ya estar cerrado)
          }
        }
      };

      debugProcess();
    },
  });

  return new Response(stream, { headers });
}
