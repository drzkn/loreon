import { google } from '@ai-sdk/google';
import { streamText } from 'ai';
import { SupabaseMarkdownRepository } from '@/adapters/output/infrastructure/supabase';
import { MarkdownPageWithSimilarity } from '@/adapters/output/infrastructure/supabase/types';
import { EmbeddingsService } from '@/services/embeddings/EmbeddingsService';

export const runtime = 'edge';

export async function POST(req: Request) {
  try {
    console.log('üöÄ [CHAT API] Recibida petici√≥n');

    const { messages } = await req.json();
    console.log('üì® [CHAT API] Mensajes recibidos:', messages?.length || 0);

    if (!messages || !Array.isArray(messages)) {
      console.log('‚ùå [CHAT API] Error: Mensajes inv√°lidos');
      return new Response('Se requiere un array de mensajes', { status: 400 });
    }

    const lastMessage = messages[messages.length - 1];
    console.log('üí¨ [CHAT API] √öltimo mensaje:', lastMessage?.content?.substring(0, 50) + '...');

    if (!lastMessage?.content) {
      console.log('‚ùå [CHAT API] Error: √öltimo mensaje sin contenido');
      return new Response('El √∫ltimo mensaje debe tener contenido', { status: 400 });
    }

    let context = '';
    let searchSummary = '';

    try {
      console.log('üîç [RAG] Iniciando b√∫squeda vectorial para:', lastMessage.content.substring(0, 100));

      console.log('ü§ñ [RAG] Creando servicio de embeddings...');
      const embeddingsService = new EmbeddingsService();

      console.log('üóÑÔ∏è [RAG] Creando repositorio...');
      const repository = new SupabaseMarkdownRepository();

      console.log('‚ö° [RAG] Generando embedding de la query...');
      const queryEmbedding = await embeddingsService.generateEmbedding(lastMessage.content);
      console.log('‚úÖ [RAG] Embedding generado:', queryEmbedding.length, 'dimensiones');

      console.log('üîé [RAG] Buscando documentos similares...');
      const documents = await repository.searchByVector(queryEmbedding, {
        matchThreshold: 0.78,
        matchCount: 5
      });

      console.log(`üìÑ [RAG] Documentos encontrados: ${documents.length}`);

      if (documents.length > 0) {
        context = documents
          .map((doc: MarkdownPageWithSimilarity) => `**${doc.title}**\n${doc.content}`)
          .join('\n\n---\n\n');

        const similarities = documents.map((doc: MarkdownPageWithSimilarity) => `${(doc.similarity * 100).toFixed(1)}%`);
        searchSummary = `Se revisaron documentos en la base de conocimientos. Los m√°s relevantes: ${documents.map((doc: MarkdownPageWithSimilarity, i: number) => `"${doc.title}" (${similarities[i]} similitud)`).join(', ')}.`;
      } else {
        searchSummary = 'Se revisaron todos los documentos disponibles pero ninguno est√° relacionado con tu consulta.';
      }

    } catch (searchError) {
      console.error('Error en b√∫squeda vectorial:', searchError);
      searchSummary = 'Hubo un error t√©cnico al buscar en la base de conocimientos.';
    }

    let systemPrompt = '';

    if (context) {
      systemPrompt = `Eres Loreon AI, un asistente especializado en la gesti√≥n de la base de conocimientos personal del usuario.

IMPORTANTE: Tu funci√≥n es EXCLUSIVAMENTE proporcionar informaci√≥n de la base de conocimientos interna del usuario. NO sugieras fuentes externas como internet, redes sociales, o motores de b√∫squeda.

CONTEXTO ENCONTRADO EN LA BASE DE CONOCIMIENTOS:
${context}

INFORMACI√ìN DE B√öSQUEDA:
${searchSummary}

INSTRUCCIONES:
- Usa √öNICAMENTE el contexto proporcionado para responder la pregunta del usuario
- Si el contexto no es completamente relevante, menciona qu√© informaci√≥n espec√≠fica no est√° disponible en la base de conocimientos
- Mant√©n un tono amigable y profesional
- Proporciona respuestas claras basadas en el contenido personal del usuario
- SIEMPRE menciona el t√≠tulo de la fuente cuando cites informaci√≥n
- Si la respuesta es parcial, sugiere que el usuario a√±ada m√°s documentaci√≥n a su base de conocimientos
- NO sugieras buscar en fuentes externas, internet, redes sociales o motores de b√∫squeda
- Enf√≥cate exclusivamente en el contenido personal disponible`;

    } else {
      const userQuery = lastMessage.content;

      systemPrompt = `Eres Loreon AI, un asistente especializado en la gesti√≥n de tu base de conocimientos personal.

IMPORTANTE: Tu funci√≥n es EXCLUSIVAMENTE buscar y proporcionar informaci√≥n de la base de conocimientos interna del usuario. NO sugieras fuentes externas como internet, redes sociales, o motores de b√∫squeda.

CONSULTA DEL USUARIO: "${userQuery}"
RESULTADO DE B√öSQUEDA: ${searchSummary}

RESPONDE EXACTAMENTE CON ESTE MENSAJE (sin a√±adir nada m√°s):

‚ùå **No se encontr√≥ informaci√≥n relacionada**

Lo siento, no he encontrado informaci√≥n espec√≠fica sobre "${userQuery}" en tu base de conocimientos actual.

**Detalles de la b√∫squeda:**
${searchSummary}

**Sugerencias para mejorar tu b√∫squeda:**
‚Ä¢ Reformula tu pregunta usando palabras clave diferentes
‚Ä¢ Verifica si tienes contenido similar en Notion que no est√© sincronizado
‚Ä¢ Considera agregar documentaci√≥n sobre este tema a tu base de conocimientos

**Recuerda:** Solo puedo buscar en tu contenido personal, no en fuentes externas.

¬øHay algo m√°s de tu base de conocimientos en lo que pueda ayudarte?

NO agregues sugerencias sobre buscar en internet, redes sociales o fuentes externas.`;
    }

    console.log('üß† [GEMINI] Prompt del sistema:', systemPrompt.substring(0, 200) + '...');
    console.log('üí≠ [GEMINI] Contexto encontrado:', context ? 'S√ç (' + context.length + ' chars)' : 'NO');
    console.log('üöÄ [GEMINI] Enviando a Gemini 1.5 Flash...');

    const result = streamText({
      model: google('gemini-1.5-flash'),
      system: systemPrompt,
      messages: context ? messages : [{ role: 'user', content: lastMessage.content }],
      temperature: 0.7,
      maxTokens: 500,
    });

    console.log('üì§ [GEMINI] Respuesta iniciada, enviando stream...');
    return result.toDataStreamResponse();

  } catch (error) {
    console.error('Error en /api/chat:', error);
    return new Response('Error interno del servidor', { status: 500 });
  }
} 