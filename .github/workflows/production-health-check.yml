name: ðŸ©º Production Health Check

on:
  schedule:
    # Ejecutar cada 6 horas
    - cron: "0 */6 * * *"
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to test"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging
      test_type:
        description: "Type of tests to run"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - health-only
          - performance-only

env:
  # Variables para el entorno de testing
  NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
  NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  GOOGLE_GENERATIVE_AI_API_KEY: ${{ secrets.GOOGLE_GENERATIVE_AI_API_KEY }}

jobs:
  health-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build application
        run: yarn build

      - name: Install Playwright browsers
        run: yarn playwright install --with-deps

      - name: Start application for testing
        run: |
          yarn start &
          sleep 30  # Esperar a que la app estÃ© lista
        env:
          NODE_ENV: production

      - name: Run Production Health Tests
        run: |
          if [ "${{ github.event.inputs.test_type }}" = "health-only" ]; then
            yarn playwright test tests/e2e/production/production-health.spec.ts --grep "Production Health Checks"
          elif [ "${{ github.event.inputs.test_type }}" = "performance-only" ]; then
            yarn playwright test tests/e2e/production/production-health.spec.ts --grep "Production Performance Tests"
          else
            yarn playwright test tests/e2e/production/production-health.spec.ts
          fi
        env:
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

      - name: Generate Health Report
        if: always()
        run: |
          echo "# Production Health Check Report" > health-report.md
          echo "Date: $(date)" >> health-report.md
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}" >> health-report.md
          echo "" >> health-report.md

          # Ejecutar health checks directos via API
          curl -s http://localhost:3000/api/health/system | jq '.' > system-health.json || echo "System health check failed"
          curl -s http://localhost:3000/api/health/database | jq '.' > database-health.json || echo "Database health check failed"
          curl -s http://localhost:3000/api/health/embeddings | jq '.' > embeddings-health.json || echo "Embeddings health check failed"

          echo "## System Health" >> health-report.md
          cat system-health.json >> health-report.md || echo "System health data not available" >> health-report.md
          echo "" >> health-report.md

          echo "## Database Health" >> health-report.md
          cat database-health.json >> health-report.md || echo "Database health data not available" >> health-report.md
          echo "" >> health-report.md

          echo "## Embeddings Health" >> health-report.md
          cat embeddings-health.json >> health-report.md || echo "Embeddings health data not available" >> health-report.md

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: production-health-results
          path: |
            test-results/
            playwright-report/
            health-report.md
            *-health.json

      - name: Create Issue on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const { readFileSync } = require('fs');

            let healthReport = '';
            try {
              healthReport = readFileSync('health-report.md', 'utf8');
            } catch (e) {
              healthReport = 'Health report not available';
            }

            const title = `ðŸš¨ Production Health Check Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # Production Health Check Failure

            **Environment:** ${{ github.event.inputs.environment || 'production' }}
            **Workflow:** ${context.workflow}
            **Run ID:** ${context.runId}
            **Trigger:** ${context.eventName}

            ## Health Report
            \`\`\`
            ${healthReport}
            \`\`\`

            ## Next Steps
            1. Check the workflow logs for detailed error information
            2. Verify all environment variables are correctly configured
            3. Test the endpoints manually if needed
            4. Review recent deployments that might have caused the issue

            **Auto-generated by GitHub Actions**
            `;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['bug', 'production', 'health-check', 'urgent']
            });

      - name: Send Slack notification on failure
        if: failure() && secrets.SLACK_WEBHOOK_URL
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{
              "text": "ðŸš¨ Production Health Check Failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Health Check Failed*\n\nEnvironment: ${{ github.event.inputs.environment || 'production' }}\nWorkflow Run: <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>"
                  }
                }
              ]
            }' \
            ${{ secrets.SLACK_WEBHOOK_URL }}

  performance-monitor:
    runs-on: ubuntu-latest
    needs: health-check
    if: github.event.inputs.test_type == 'full' || github.event.inputs.test_type == 'performance-only'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run Performance Benchmarks
        run: |
          echo "Running performance benchmarks..."
          # AquÃ­ podrÃ­as ejecutar herramientas como Lighthouse, k6, etc.
          # Por ejemplo: yarn lighthouse http://localhost:3000

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            lighthouse-results/
            performance-metrics.json
