name: üß™ Tests & Quality Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "yarn"

      - name: üìã Install dependencies
        run: yarn install --frozen-lockfile

      - name: üîç Run linting
        run: yarn lint
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_BASE_URL: ${{ secrets.NOTION_BASE_URL }}
          NOTION_API_VERSION: ${{ secrets.NOTION_API_VERSION }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: üß™ Run tests
        run: yarn test:run
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_BASE_URL: ${{ secrets.NOTION_BASE_URL }}
          NOTION_API_VERSION: ${{ secrets.NOTION_API_VERSION }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: üìä Run tests with coverage
        run: yarn test:coverage
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_BASE_URL: ${{ secrets.NOTION_BASE_URL }}
          NOTION_API_VERSION: ${{ secrets.NOTION_API_VERSION }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: üìà Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: üí¨ Comment coverage on PR
        uses: romeovs/lcov-reporter-action@v0.3.1
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          lcov-file: ./coverage/lcov.info
          delete-old-comments: true

  build:
    name: üèóÔ∏è Build Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: üìã Install dependencies
        run: yarn install --frozen-lockfile

      - name: üèóÔ∏è Build application
        run: yarn build
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_DATABASE_ID: ${{ secrets.NOTION_DATABASE_ID }}
          NOTION_BASE_URL: ${{ secrets.NOTION_BASE_URL }}
          NOTION_API_VERSION: ${{ secrets.NOTION_API_VERSION }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  quality-gate:
    name: üö¶ Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always()

    steps:
      - name: ‚úÖ Check job status
        run: |
          if [[ "${{ needs.test.result }}" != "success" || "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Quality gate failed!"
            echo "Test result: ${{ needs.test.result }}"
            echo "Build result: ${{ needs.build.result }}"
            exit 1
          else
            echo "‚úÖ Quality gate passed!"
          fi
